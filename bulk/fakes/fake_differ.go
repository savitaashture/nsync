// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/nsync/bulk"
	"github.com/cloudfoundry-incubator/receptor"
	"github.com/cloudfoundry-incubator/runtime-schema/cc_messages"
	"github.com/pivotal-golang/lager"
)

type FakeDiffer struct {
	DiffStub        func(logger lager.Logger, cancel <-chan struct{}, existing []receptor.DesiredLRPResponse, desiredFingerprints <-chan []cc_messages.CCDesiredAppFingerprint, missingFingerprints chan<- []cc_messages.CCDesiredAppFingerprint, updatedFingerprints chan<- []cc_messages.CCDesiredAppFingerprint) []string
	diffMutex       sync.RWMutex
	diffArgsForCall []struct {
		logger              lager.Logger
		cancel              <-chan struct{}
		existing            []receptor.DesiredLRPResponse
		desiredFingerprints <-chan []cc_messages.CCDesiredAppFingerprint
		missingFingerprints chan<- []cc_messages.CCDesiredAppFingerprint
		updatedFingerprints chan<- []cc_messages.CCDesiredAppFingerprint
	}
	diffReturns struct {
		result1 []string
	}
}

func (fake *FakeDiffer) Diff(logger lager.Logger, cancel <-chan struct{}, existing []receptor.DesiredLRPResponse, desiredFingerprints <-chan []cc_messages.CCDesiredAppFingerprint, missingFingerprints chan<- []cc_messages.CCDesiredAppFingerprint, updatedFingerprints chan<- []cc_messages.CCDesiredAppFingerprint) []string {
	fake.diffMutex.Lock()
	fake.diffArgsForCall = append(fake.diffArgsForCall, struct {
		logger              lager.Logger
		cancel              <-chan struct{}
		existing            []receptor.DesiredLRPResponse
		desiredFingerprints <-chan []cc_messages.CCDesiredAppFingerprint
		missingFingerprints chan<- []cc_messages.CCDesiredAppFingerprint
		updatedFingerprints chan<- []cc_messages.CCDesiredAppFingerprint
	}{logger, cancel, existing, desiredFingerprints, missingFingerprints, updatedFingerprints})
	fake.diffMutex.Unlock()
	if fake.DiffStub != nil {
		return fake.DiffStub(logger, cancel, existing, desiredFingerprints, missingFingerprints, updatedFingerprints)
	} else {
		return fake.diffReturns.result1
	}
}

func (fake *FakeDiffer) DiffCallCount() int {
	fake.diffMutex.RLock()
	defer fake.diffMutex.RUnlock()
	return len(fake.diffArgsForCall)
}

func (fake *FakeDiffer) DiffArgsForCall(i int) (lager.Logger, <-chan struct{}, []receptor.DesiredLRPResponse, <-chan []cc_messages.CCDesiredAppFingerprint, chan<- []cc_messages.CCDesiredAppFingerprint, chan<- []cc_messages.CCDesiredAppFingerprint) {
	fake.diffMutex.RLock()
	defer fake.diffMutex.RUnlock()
	return fake.diffArgsForCall[i].logger, fake.diffArgsForCall[i].cancel, fake.diffArgsForCall[i].existing, fake.diffArgsForCall[i].desiredFingerprints, fake.diffArgsForCall[i].missingFingerprints, fake.diffArgsForCall[i].updatedFingerprints
}

func (fake *FakeDiffer) DiffReturns(result1 []string) {
	fake.DiffStub = nil
	fake.diffReturns = struct {
		result1 []string
	}{result1}
}

var _ bulk.Differ = new(FakeDiffer)
